fn main() {
    // Rust提供了两种符合类型
    // 分别是元组和数组，可以把多个值放在一个类型里面

    // 元组 Tuple
    // 长度固定，一旦声明，长度无法更改
    // 元组中的数据类型不用相同
    let tup: (i32, f64, u8) = (500, 6.4, 1);

    // 访问通过点来访问 访问的是索引号
    println!("{} {} {}", tup.0, tup.1, tup.2);

    // 也可以通过解构进行获取
    let (x, y, z) = tup;
    println!("{} {} {}", x, y, z);

    // 数组
    // 长度固定，但是每个数据类型必须一样
    // 如果你要让数据存放在栈内存上面，而不是堆内存上面，那么使用数组
    // 数组没有Vector容器灵活，这个和Cpp一样
    let a = [1, 2, 3, 4, 5];
    // 数组访问正常通过数组访问就行
    println!("{}", a[0]);

    // 数组类型标注方法如下
    // let a: [i32; 10];

    // 如果一个数组里面的元素都一样，那么可以这样创建：
    let a = [3; 5];
    // 这个就相当于let a = [3, 3, 3, 3, 3]
    println!("{}", a[0]);

    // 如果访问不存在的元素，编译会通过，但是运行会报错panic，和Cpp不一样
}
