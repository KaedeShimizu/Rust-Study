// RUST 使用snake case命名规范
// 函数的所有名称都是小写，单词之间用下划线分割
// 注意，这里函数的声明无所谓在哪里，只要能找到就行，无所谓位置
// 但是为了符合习惯，我还是写在上面
fn another_fun() {
    println!("Another fun");
}

// 函数的参数
// 必须指定参数类型 从而更好地推断类型
fn another_fun2(x: i32, y: i32) {
    println!("The x is {}, y is {}", x, y);
}

// 函数体就不说了，就是花括号里面的东西，函数的定义也是语句，语句是没有返回值的
// 所以不能把语句赋给一个变量 statement不行，但是C语言是可以的
// 表达式可以是a + b，如果一个块最后一句话是表达式，那么就相当于返回值了

// 函数的返回值
// 需要声明类型，不能给返回值命名
// 返回值默认就是函数体最后面一个表达式
// 如果要提前返回，使用return返回就好
fn another_fun3(x: i32) -> i32 {
    // 直接给一个表达式，没有分号
    // 如果有分号就是一个语句了，不行滴
    x + 5
}
fn main() {
    // 调用函数
    another_fun();
    another_fun2(10, 20);
    println!("fn3 is {}", another_fun3(6));
}
