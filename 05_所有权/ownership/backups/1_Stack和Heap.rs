/*
Rust的核心特性就是所有权
所有程序运行时必须要管理员他们使用计算机内存的方式
比如垃圾回收，或者程序员显示的分配内存
但是Rust通过一个所有权系统来管理，包含了一组编译器在编译时检查的规则
所有权不会拖慢程序运行

Stack和Heap，栈内存和堆内存，结构是完全不一样的
Stack是LIFO，后进先出，所有储存在Stack上面的数据都必须有已知的固定大小
Heap会找到一块足够大的空间，然后返回一个指针

访问Heap比访问Stack要慢，因为要通过指针才能找到
对于现在的处理器，跳转的越少，也就越快
如果数据存放的比较近，那么处理器处理的就会快一些 在stack上面
如果数据之间放的比较远，那么自然就会慢一些 在Heap上面
*/
fn main() {
    println!("Hello, world!");
}
